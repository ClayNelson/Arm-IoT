name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          # Add ARM architecture
          sudo dpkg --add-architecture armhf
          
          # Backup and create new sources.list
          sudo mv /etc/apt/sources.list /etc/apt/sources.list.bak
          sudo tee /etc/apt/sources.list > /dev/null << 'EOF'
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse
          
          deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted universe multiverse
          deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted universe multiverse
          deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ jammy-security main restricted universe multiverse
          EOF
          
          # Update and install dependencies
          sudo apt-get update
          sudo apt-get install -y cmake make gcc sshpass
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
          
          # Verify toolchain installation
          arm-linux-gnueabihf-gcc --version

      - name: Verify Environment
        run: |
          echo "Checking ARM toolchain..."
          which arm-linux-gnueabihf-gcc || { echo "ARM GCC not found"; exit 1; }
          arm-linux-gnueabihf-gcc --version
          
          echo "Checking toolchain directory..."
          ls -la toolchains/
          
          echo "Verifying toolchain file contents..."
          cat toolchains/arm-toolchain.cmake
          
          echo "Checking source files..."
          ls -la src/

      - name: Build
        run: |
          echo "Creating build directory..."
          rm -rf build
          mkdir -p build
          cd build
          
          echo "Running CMake with ARM toolchain..."
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_TOOLCHAIN_FILE=../toolchains/arm-toolchain.cmake \
                -DCMAKE_C_FLAGS="-march=armv8-a -mfloat-abi=hard -mfpu=neon-fp-armv8" \
                -DCMAKE_CXX_FLAGS="-march=armv8-a -mfloat-abi=hard -mfpu=neon-fp-armv8" \
                -DCMAKE_EXE_LINKER_FLAGS="-march=armv8-a -mfloat-abi=hard -mfpu=neon-fp-armv8" \
                -DCMAKE_VERBOSE_MAKEFILE=ON \
                ..
          
          echo "CMake configuration:"
          cmake -LA .
          
          echo "Building..."
          make VERBOSE=1
          
          echo "Build directory contents:"
          ls -la
          
          if [ ! -f blink ]; then
            echo "Error: Build step did not produce the 'blink' binary."
            echo "CMake error log:"
            cat CMakeFiles/CMakeError.log || true
            echo "CMake output log:"
            cat CMakeFiles/CMakeOutput.log || true
            exit 1
          fi
          
          echo "Binary information:"
          file blink
          readelf -h blink || true
          ldd blink || true

      - name: Configure SSH
        run: |
          # Create SSH directory and set permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write private key and set permissions
          echo "${{ secrets.AVH_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Generate public key
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          chmod 644 ~/.ssh/id_rsa.pub
          
          # Create SSH config with enhanced settings
          cat > ~/.ssh/config << 'EOF'
          Host proxy
            HostName proxy.app.avh.corellium.com
            Port 22
            User 3ac4e20f-02f4-45bb-bfbd-9f6e3029f981
            IdentityFile ~/.ssh/id_rsa
            PreferredAuthentications publickey
            PubkeyAcceptedKeyTypes +ssh-rsa
            HostKeyAlgorithms +ssh-rsa
            KexAlgorithms +diffie-hellman-group14-sha1
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            LogLevel DEBUG3
            ServerAliveInterval 30
            ServerAliveCountMax 3
            ConnectTimeout 30
            LocalForward 2222 10.11.0.1:22

          Host target
            HostName localhost
            Port 2222
            User pi
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            LogLevel DEBUG3
            ServerAliveInterval 30
            ServerAliveCountMax 3
            ConnectTimeout 30
          EOF
          chmod 600 ~/.ssh/config
          
          # Test SSH connection with debugging
          echo "Testing SSH connection to proxy..."
          ssh -v proxy echo "SSH connection successful!" || echo "SSH connection failed"

      - name: Deploy to AVH
        run: |
          echo "Deploying blink binary to AVH..."
          
          echo "Network diagnostics:"
          echo "1. DNS resolution:"
          dig +short proxy.app.avh.corellium.com || true
          host proxy.app.avh.corellium.com || true
          
          echo "2. Network routes:"
          ip route
          
          echo "3. Testing proxy connectivity:"
          for port in 22 2003 2222; do
            echo "Testing port $port..."
            timeout 5 nc -zv proxy.app.avh.corellium.com $port || true
          done
          
          echo "4. SSH configuration:"
          ls -la ~/.ssh/
          cat ~/.ssh/config
          
          echo "5. SSH key verification:"
          ssh-keygen -l -f ~/.ssh/id_rsa
          
          echo "6. Testing direct SSH connection:"
          ssh -v -o ConnectTimeout=10 proxy echo "Direct connection test" || true
          
          echo "7. Setting up tunnel:"
          ssh -f -N -v -o ExitOnForwardFailure=yes proxy
          
          echo "8. Waiting for tunnel:"
          for i in {1..6}; do
            echo "Attempt $i: Testing local forward..."
            if nc -z localhost 2222; then
              echo "Local forward is working"
              break
            fi
            if [ $i -eq 6 ]; then
              echo "Failed to establish local forward"
              exit 1
            fi
            sleep 5
          done
          
          echo "9. Testing target connection:"
          if ! ssh -v -o ConnectTimeout=10 target echo "Target test"; then
            echo "Failed to connect to target"
            ps aux | grep ssh
            exit 1
          fi
          
          echo "10. Copying binary:"
          if ! scp -v -o ConnectTimeout=10 build/blink target:~/; then
            echo "Failed to copy binary"
            exit 1
          fi
          
          echo "11. Setting permissions and running:"
          if ! ssh -v target "chmod +x ~/blink && ~/blink"; then
            echo "Failed to execute binary"
            exit 1
          fi
