name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          # Add ARM architecture
          sudo dpkg --add-architecture armhf
          
          # Backup and create new sources.list
          sudo mv /etc/apt/sources.list /etc/apt/sources.list.bak
          sudo tee /etc/apt/sources.list > /dev/null << 'EOF'
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse
          
          deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted universe multiverse
          deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted universe multiverse
          deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ jammy-security main restricted universe multiverse
          EOF
          
          # Update and install dependencies
          sudo apt-get update
          sudo apt-get install -y cmake make gcc sshpass
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
          
          # Verify toolchain installation
          arm-linux-gnueabihf-gcc --version

      - name: Build
        run: |
          echo "Creating build directory..."
          mkdir -p build
          cd build
          
          echo "Running CMake with ARM toolchain..."
          CFLAGS="-march=armv8-a -mfloat-abi=hard -mfpu=neon-fp-armv8" \
          CXXFLAGS="-march=armv8-a -mfloat-abi=hard -mfpu=neon-fp-armv8" \
          LDFLAGS="-march=armv8-a -mfloat-abi=hard -mfpu=neon-fp-armv8" \
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_TOOLCHAIN_FILE=../toolchains/arm-toolchain.cmake \
                -DCMAKE_C_FLAGS="-march=armv8-a -mfloat-abi=hard -mfpu=neon-fp-armv8" \
                -DCMAKE_CXX_FLAGS="-march=armv8-a -mfloat-abi=hard -mfpu=neon-fp-armv8" \
                -DCMAKE_EXE_LINKER_FLAGS="-march=armv8-a -mfloat-abi=hard -mfpu=neon-fp-armv8" ..
          
          echo "Running Make..."
          make VERBOSE=1
          
          if [ ! -f blink ]; then
            echo "Error: Build step did not produce the 'blink' binary."
            exit 1
          fi
          
          echo "Checking binary type:"
          file blink

      - name: Configure SSH
        run: |
          # Create SSH directory and set permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write private key and set permissions
          echo "${{ secrets.AVH_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Generate public key
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          chmod 644 ~/.ssh/id_rsa.pub
          
          # Create SSH config with enhanced settings
          cat > ~/.ssh/config << 'EOF'
          Host proxy
            HostName 172.16.0.50
            Port 2003
            User 3ac4e20f-02f4-45bb-bfbd-9f6e3029f981
            IdentityFile ~/.ssh/id_rsa
            PreferredAuthentications publickey
            PubkeyAcceptedKeyTypes +ssh-rsa
            HostKeyAlgorithms +ssh-rsa
            KexAlgorithms +diffie-hellman-group14-sha1
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            LogLevel DEBUG3

          Host target
            HostName 10.11.0.1
            User pi
            ProxyCommand ssh -v proxy -W %h:%p
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            LogLevel DEBUG3
          EOF
          chmod 600 ~/.ssh/config
          
          # Test SSH connection with debugging
          echo "Testing SSH connection to proxy..."
          ssh -v proxy echo "SSH connection successful!" || echo "SSH connection failed"

      - name: Deploy to AVH
        run: |
          echo "Deploying blink binary to AVH..."
          
          echo "Current directory contents:"
          ls -la build/
          
          echo "Network configuration:"
          netstat -nr
          
          echo "DNS resolution:"
          nslookup 172.16.0.50 || true
          
          echo "Testing proxy connectivity:"
          nc -zv 172.16.0.50 2003 || true
          
          echo "SSH debug information:"
          ssh -vvv proxy echo "SSH connection test" || true
          
          echo "SSH key information:"
          ssh-keygen -l -f ~/.ssh/id_rsa
          
          echo "SSH config:"
          cat ~/.ssh/config
          
          # Try to establish SSH connection
          echo "Testing SSH connection..."
          if ! ssh -v proxy echo "SSH connection successful!"; then
            echo "Failed to connect to proxy server."
            exit 1
          fi
          
          # Attempt deployment
          echo "Copying binary to target..."
          if ! scp -v build/blink target:~/; then
            echo "Failed to copy binary."
            exit 1
          fi
          
          echo "Setting permissions and running binary..."
          if ! ssh -v target "chmod +x ~/blink && ~/blink"; then
            echo "Failed to execute binary on target."
            exit 1
          fi
