name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          echo "Adding ARM architecture support..."
          sudo dpkg --add-architecture armhf || {
            echo "Failed to add ARM architecture. Check permissions and dpkg configuration.";
            dpkg --print-architecture;
            dpkg --print-foreign-architectures;
            exit 1;
          }
          
          echo "Configuring package sources..."
          # Backup original sources
          sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
          
          # Create separate sources for ARM
          sudo tee /etc/apt/sources.list.d/armhf.list > /dev/null << 'EOF'
          deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted universe multiverse
          deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted universe multiverse
          deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ jammy-security main restricted universe multiverse
          EOF
          
          # Keep original sources for amd64
          sudo sed -i 's/^deb /deb [arch=amd64] /' /etc/apt/sources.list
          
          echo "Updating package lists..."
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo apt-get update -o Acquire::Check-Valid-Until=false || {
            echo "Failed to update package lists. Verify network connectivity and sources configuration.";
            cat /etc/apt/sources.list;
            cat /etc/apt/sources.list.d/armhf.list;
            exit 1;
          }
          
          echo "Installing all dependencies..."
          sudo apt-get install -y \
            cmake make gcc sshpass netcat-openbsd \
            gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf \
            libc6:armhf libstdc++6:armhf || {
              echo "Failed to install dependencies. Verify sources and network connectivity.";
              apt-cache policy gcc-arm-linux-gnueabihf;
              exit 1;
          }
          
          echo "Setting up toolchain paths..."
          TOOLCHAIN_PATHS=(
            "/usr/bin"
            "/usr/local/bin"
            "/usr/arm-linux-gnueabihf/bin"
          )
          
          for path in "${TOOLCHAIN_PATHS[@]}"; do
            if [ -f "$path/arm-linux-gnueabihf-gcc" ]; then
              export PATH="$path:$PATH"
              echo "Added toolchain path: $path"
              break
            fi
          done
          
          echo "Verifying toolchain installation..."
          if ! which arm-linux-gnueabihf-gcc; then
            echo "Error: ARM GCC not found in PATH";
            echo "Current PATH: $PATH";
            echo "Looking for ARM toolchain files:";
            sudo find / -name "arm-linux-gnueabihf-gcc" 2>/dev/null || true;
            exit 1;
          fi
          
          echo "ARM toolchain version:"
          arm-linux-gnueabihf-gcc --version || {
            echo "Failed to get toolchain version. Checking installation:";
            dpkg -l | grep -i arm;
            exit 1;
          }
          
          echo "Checking ARM library dependencies:"
          dpkg -l | grep "armhf" || {
            echo "No ARM libraries found. Checking package status:";
            apt-cache policy libc6:armhf libstdc++6:armhf;
            exit 1;
          }

      - name: Verify Environment
        run: |
          echo "Checking ARM toolchain..."
          which arm-linux-gnueabihf-gcc || { echo "ARM GCC not found"; exit 1; }
          arm-linux-gnueabihf-gcc --version
          
          echo "Checking toolchain directory..."
          ls -la toolchains/
          
          echo "Verifying toolchain file contents..."
          cat toolchains/arm-toolchain.cmake
          
          echo "Checking source files..."
          ls -la src/

      - name: Build
        run: |
          echo "Creating build directory..."
          mkdir -p build
          cd build
          
          echo "Running CMake with ARM toolchain..."
          cmake -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc \
                -DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++ \
                -DCMAKE_C_FLAGS="-march=armv8-a -mfloat-abi=hard -mfpu=neon-fp-armv8" \
                -DCMAKE_CXX_FLAGS="-march=armv8-a -mfloat-abi=hard -mfpu=neon-fp-armv8" \
                -DCMAKE_EXE_LINKER_FLAGS="-march=armv8-a -mfloat-abi=hard -mfpu=neon-fp-armv8" \
                -DCMAKE_VERBOSE_MAKEFILE=ON .. || {
            echo "CMake configuration failed. Logs:";
            cat CMakeFiles/CMakeError.log || true;
            exit 1;
          }
          
          echo "Building project..."
          make || {
            echo "Build failed. Check compilation errors above.";
            exit 1;
          }
          
          echo "Verifying binary architecture..."
          if ! file blink | grep -q "ARM"; then
            echo "Error: Binary is not compiled for ARM";
            file blink;
            exit 1;
          fi
          
          echo "CMake configuration:"
          cmake -LA .
          
          echo "Building..."
          make VERBOSE=1 || {
            echo "Build failed. Logs:"
            cat CMakeFiles/CMakeError.log || true
            cat CMakeFiles/CMakeOutput.log || true
            exit 1
          }
          
          echo "Build directory contents:"
          ls -la
          
          if [ ! -f blink ]; then
            echo "Error: Build step did not produce the 'blink' binary."
            echo "CMake error log:"
            cat CMakeFiles/CMakeError.log || true
            echo "CMake output log:"
            cat CMakeFiles/CMakeOutput.log || true
            exit 1
          fi
          
          echo "Binary information:"
          file blink
          readelf -h blink || true
          ldd blink || true
          
          echo "Verifying binary architecture:"
          if ! file blink | grep -q "ARM"; then
            echo "Error: Binary is not compiled for ARM"
            exit 1
          fi

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.AVH_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          chmod 644 ~/.ssh/id_rsa.pub
          # Create minimal SSH config for StrictHostKeyChecking
          cat > ~/.ssh/config << 'EOF'
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            LogLevel DEBUG3
          EOF
          chmod 600 ~/.ssh/config
          
          # Set up variables
          PROXY="3ac4e20f-02f4-45bb-bfbd-9f6e3029f981@proxy.app.avh.corellium.com"
          TARGET="pi@10.11.0.1"
          
          # Install expect
          sudo apt-get update && sudo apt-get install -y expect
          
          # Create SSH key copy script
          cat > copy_key.exp << 'EOF'
          #!/usr/bin/expect -f
          set timeout 30
          set proxy [lindex $argv 0]
          set target [lindex $argv 1]
          set key [lindex $argv 2]
          
          spawn bash -c "echo $key | ssh -o ConnectTimeout=10 -J $proxy $target 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys'"
          expect {
            -re ".*password:" { send "raspberry\r"; exp_continue }
            timeout { exit 1 }
            eof { exit [lindex [wait] 3] }
          }
          EOF
          
          chmod +x copy_key.exp
          
          # Copy SSH key using expect script
          echo "Copying SSH key to target..."
          KEY=$(cat ~/.ssh/id_rsa.pub)
          ./copy_key.exp "$PROXY" "$TARGET" "$KEY"
          
          # Test SSH connection with key auth
          echo "Testing SSH connection..."
          if ! ssh -o ConnectTimeout=10 -v -J $PROXY $TARGET 'whoami && echo "SSH_CONNECTION=$SSH_CONNECTION"'; then
            echo "SSH connection failed"
            exit 1
          fi

      - name: Verify Build Output
        run: |
          echo "Verifying blink binary..."
          if [ ! -f "build/blink" ]; then
            echo "Error: build/blink binary not found!"
            ls -la build/
            exit 1
          fi
          
          echo "Binary details:"
          file build/blink
          readelf -h build/blink || true

      - name: Test SSH Connection
        run: |
          PROXY="3ac4e20f-02f4-45bb-bfbd-9f6e3029f981@proxy.app.avh.corellium.com"
          TARGET="pi@10.11.0.1"
          
          echo "Testing SSH connection..."
          if ! ssh -o ConnectTimeout=10 -v -J $PROXY $TARGET 'whoami && echo "SSH_CONNECTION=$SSH_CONNECTION"'; then
            echo "SSH connection failed"
            exit 1
          fi

      - name: Setup Target Environment
        run: |
          PROXY="3ac4e20f-02f4-45bb-bfbd-9f6e3029f981@proxy.app.avh.corellium.com"
          TARGET="pi@10.11.0.1"
          
          echo "Creating and fixing permissions for target directory..."
          if ! ssh -o ConnectTimeout=10 -J $PROXY $TARGET "sudo rm -rf /home/pi/app && sudo mkdir -p /home/pi/app && sudo chown -R pi:pi /home/pi/app && sudo chmod -R 755 /home/pi/app"; then
            echo "Failed to set up target directory"
            exit 1
          fi
          
          echo "Setting up GPIO directory..."
          if ! ssh -o ConnectTimeout=10 -J $PROXY $TARGET "sudo mkdir -p /sys/class/gpio && sudo chmod -R 777 /sys/class/gpio"; then
            echo "Failed to set up GPIO directory"
            exit 1
          fi
          
          echo "Checking target environment:"
          ssh -o ConnectTimeout=10 -J $PROXY $TARGET "ls -ld /home/pi/app && ls -ld /sys/class/gpio"

      - name: Deploy and Verify
        run: |
          PROXY="3ac4e20f-02f4-45bb-bfbd-9f6e3029f981@proxy.app.avh.corellium.com"
          TARGET="pi@10.11.0.1"
          
          echo "Deploying blink binary..."
          if ! scp -v -o ConnectTimeout=10 -o ProxyJump=$PROXY build/blink $TARGET:/home/pi/app/; then
            echo "Failed to copy binary to target"
            exit 1
          fi
          
          echo "Setting executable permissions..."
          if ! ssh -o ConnectTimeout=10 -J $PROXY $TARGET "chmod +x /home/pi/app/blink"; then
            echo "Failed to set executable permissions"
            exit 1
          fi
          
          echo "Checking binary on target:"
          ssh -o ConnectTimeout=10 -J $PROXY $TARGET "ls -l /home/pi/app/blink && file /home/pi/app/blink && ldd /home/pi/app/blink || true"
          
          echo "Running blink program..."
          if ! ssh -o ConnectTimeout=10 -J $PROXY $TARGET "/home/pi/app/blink"; then
            echo "Failed to execute binary"
            exit 1
          fi
