name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          # Add ARM architecture
          sudo dpkg --add-architecture armhf
          
          # Backup and create new sources.list
          sudo mv /etc/apt/sources.list /etc/apt/sources.list.bak
          sudo tee /etc/apt/sources.list > /dev/null << 'EOF'
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse
          deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted universe multiverse
          deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted universe multiverse
          deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ jammy-security main restricted universe multiverse
          EOF
          
          # Update and install dependencies
          sudo apt-get update
          sudo apt-get install -y cmake make gcc sshpass netcat-openbsd
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
          sudo apt-get install -y libc6:armhf libstdc++6:armhf
          
          # Verify toolchain installation
          arm-linux-gnueabihf-gcc --version

      - name: Verify Environment
        run: |
          echo "Checking ARM toolchain..."
          which arm-linux-gnueabihf-gcc || { echo "ARM GCC not found"; exit 1; }
          arm-linux-gnueabihf-gcc --version
          
          echo "Checking toolchain directory..."
          ls -la toolchains/
          
          echo "Verifying toolchain file contents..."
          cat toolchains/arm-toolchain.cmake
          
          echo "Checking source files..."
          ls -la src/

      - name: Build
        run: |
          echo "Creating build directory..."
          rm -rf build
          mkdir -p build
          cd build
          
          echo "Running CMake with ARM toolchain..."
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_TOOLCHAIN_FILE=../toolchains/arm-toolchain.cmake \
                -DCMAKE_C_FLAGS="-march=armv8-a -mfloat-abi=hard -mfpu=neon-fp-armv8" \
                -DCMAKE_CXX_FLAGS="-march=armv8-a -mfloat-abi=hard -mfpu=neon-fp-armv8" \
                -DCMAKE_EXE_LINKER_FLAGS="-march=armv8-a -mfloat-abi=hard -mfpu=neon-fp-armv8" \
                -DCMAKE_VERBOSE_MAKEFILE=ON \
                .. || {
            echo "CMake configuration failed. Logs:"
            cat CMakeFiles/CMakeError.log || true
            cat CMakeFiles/CMakeOutput.log || true
            exit 1
          }
          
          echo "CMake configuration:"
          cmake -LA .
          
          echo "Building..."
          make VERBOSE=1 || {
            echo "Build failed. Logs:"
            cat CMakeFiles/CMakeError.log || true
            cat CMakeFiles/CMakeOutput.log || true
            exit 1
          }
          
          echo "Build directory contents:"
          ls -la
          
          if [ ! -f blink ]; then
            echo "Error: Build step did not produce the 'blink' binary."
            echo "CMake error log:"
            cat CMakeFiles/CMakeError.log || true
            echo "CMake output log:"
            cat CMakeFiles/CMakeOutput.log || true
            exit 1
          fi
          
          echo "Binary information:"
          file blink
          readelf -h blink || true
          ldd blink || true
          
          echo "Verifying binary architecture:"
          if ! file blink | grep -q "ARM"; then
            echo "Error: Binary is not compiled for ARM"
            exit 1
          fi

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.AVH_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          chmod 644 ~/.ssh/id_rsa.pub
          cat > ~/.ssh/config << 'EOF'
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            LogLevel DEBUG3

          Host proxy
            HostName proxy.app.avh.corellium.com
            User claynelson
            IdentityFile ~/.ssh/id_rsa
            
          Host target
            HostName 10.11.0.1
            User pi
            ProxyJump proxy
          EOF
          chmod 600 ~/.ssh/config
          
          # Test proxy connection
          ssh -v proxy 'echo "Proxy connection successful"'

      - name: Deploy to AVH
        run: |
          echo "Setting up GPIO directory..."
          ssh target 'sudo mkdir -p /sys/class/gpio && sudo chmod -R 777 /sys/class/gpio'
          
          echo "Deploying blink binary..."
          ssh target 'mkdir -p ~/app'
          scp build/blink target:~/app/
          
          echo "Running blink program..."
          ssh target 'chmod +x ~/app/blink && ~/app/blink'
